AWSTemplateFormatVersion: 2010-09-09
Description: Testing Avi AMI Lookup

Parameters: 
  Version:
    Description: Provide the Version of Avi you would like to install
    Type: String
    AllowedValues:
      - Latest 21.x
      - Latest 20.x
      - Latest 18.x
      - 21.1.1
      - 21.1.2
      - 20.1.1
      - 20.1.2
      - 20.1.3
      - 20.1.4
      - 20.1.5
      - 20.1.6
      - 20.1.7
      - 18.2.13

Resources:
  LambdaExecutionPolicyAmiLookup:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ec2
            Effect: Allow
            Action: [
              'ec2:DescribeImages',
              'ec2:RunInstances'
            ]
            Resource: '*'
          - Sid: log
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  LambdaExecutionRoleAmiLookup:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: [
        !Ref LambdaExecutionPolicyAmiLookup
      ]
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Path: /

  LambdaAMILookup:
    Type: AWS::Lambda::Function
    Properties:
      Description: AMI Lookup Lambda Function
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRoleAmiLookup.Arn
      Runtime: python3.6
      Timeout: 5
      Code:
        ZipFile: |
          #!/usr/bin/python
          import boto3
          import botocore.exceptions
          import re
          import cfnresponse

          ec2 = boto3.client('ec2')

          class AmiNotFound(Exception):
              pass
          class OptInRequired(Exception):
              pass

          def get_avi_version(ami):
              '''
              Pulls Avi Version out of an AMI Description
              '''
              regex = re.compile('\d+\.\d+\.\d+', re.IGNORECASE)
              m = regex.search(ami['Description'])
              return m.group() if m else None

          def get_latest_ami_by_major_version(major_version, image_list):
              '''
              Get the latest version of a major release. I.E. if 20.x is specified and 20.1.1 - 20.1.6
              are available, choose 20.1.6

              Acceptable values as of 12/2021: Latest 18.x, Latest 20.x, Latest 21.x
              '''

              major_version_num = major_version.split(' ')[1].split('.')[0]
              result = { 'Ami': '', 'Version': ''}

              for image in image_list:
                  version = get_avi_version(image)
                  if version and version.startswith(major_version_num):
                      if not result['Ami']:
                          result['Ami'] = image['ImageId']
                          result['Version'] = version
                      elif version > result['Version']:
                          result['Ami'] = image['ImageId']
                          result['Version'] = version
                      else:
                          pass

              if not result['Ami']:
                  raise AmiNotFound("No AMI could be found with the specified parameters")

              return result

          def get_ami_by_version_number(version_number, image_list):
              result = { 'Ami': '', 'Version': '' }
              for image in image_list:
                  version = get_avi_version(image)
                  if version and version_number in version:
                      result['Ami'] = image['ImageId']
                      result['Version'] = version_number
                      return result
              raise AmiNotFound("No AMI could be found with the specified parameters")

          def test_ami_permissions(ami, event, context):
              try:
                  response = ec2.run_instances(
                      ImageId=ami,
                      InstanceType='m5.2xlarge',
                      DryRun=True,
                      MaxCount=1,
                      MinCount=1
                  )
              except botocore.exceptions.ClientError as e:
                  if e.response['Error'].get('Code') == 'DryRunOperation':
                      pass
                  elif e.response['Error'].get('Code') == 'OptInRequired':
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': 'Product is not subscribed to in the AWS Marketplace.'})
                  else:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': 'Unknown exception when testing AMI permissions'})

          response = ec2.describe_images(
              Filters=[
                  {
                      "Name": "product-code",
                      "Values": [
                          "a9e7i60gidrc5x9nd7z3qyjj5"
                      ]
                  },
                  {
                      "Name": "state",
                      "Values": [
                          "available"
                          ]
                  }
              ]
          )
          images = response['Images']

          def lambda_handler(event, context):
              requested_image_version = event['ResourceProperties']['VersionRequested']
              responseData = {}

              try:
                  if event['RequestType'] == 'Delete':
                      print('Delete Event Requested')
                      return(cfnresponse.send(event, context, cfnresponse.SUCCESS, {}))

                  if "Latest" in requested_image_version:
                      responseData = get_latest_ami_by_major_version(requested_image_version, images)
                  else:
                      responseData = get_ami_by_version_number(requested_image_version, images)
                  
              except Exception:
                  responseData = {}
                  responseData['Error'] = 'Execution error when performing AMI lookup. Please check logs'
                  response = cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
                            
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt LambdaAMILookup.Arn
      VersionRequested: !Ref Version

Outputs:
  AMI:
    Description: AMI Returned from Lambda
    Value: !GetAtt AMIInfo.Ami
  Version:
    Description: Version of Avi
    Value: !GetAtt AMIInfo.Version